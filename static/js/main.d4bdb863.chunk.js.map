{"version":3,"sources":["Components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Section","index","members","color","cards","winpos","setWinpos","treasurepos","setTreasurepos","useState","code","setCode","cardIndex","setCardIndex","win","setWin","treasure","setTreasure","progressRef","useRef","useEffect","children","current","length","i","style","backgroundColor","tmpWin","splice","randIdx","Math","floor","random","trepos","tmpstr","min","split","className","background","ref","map","card","size","value","level","src","alt","onClick","e","prev","sort","join","App","colors","teams","setTeams","cardsData","setCardsData","setCards","a","fetch","then","data","json","res","catch","err","console","log","fetchTeams","fetchCards","tmpCards","Object","keys","forEach","key","cardsArray","randomIndex","push","randomlyAddCards","team","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4bdb863.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport QRCode from \"react-qr-code\";\r\n\r\nfunction Section({\r\n    index,\r\n    members,\r\n    color,\r\n    cards = [],\r\n    winpos,\r\n    setWinpos,\r\n    treasurepos,\r\n    setTreasurepos,\r\n}) {\r\n    const [code, setCode] = useState(\"\");\r\n    const [cardIndex, setCardIndex] = useState(0);\r\n    const [win, setWin] = useState(-1);\r\n    const [treasure, setTreasure] = useState(-1);\r\n    const progressRef = useRef();\r\n\r\n    useEffect(() => {\r\n        let children = progressRef.current.children;\r\n        if (children && children.length > 1) {\r\n            for (let i = 0; i < cardIndex; i++) {\r\n                children[i].style.backgroundColor = \"green\";\r\n            }\r\n            for (let i = cardIndex; i < children.length; i++) {\r\n                children[i].style.backgroundColor = \"#d20909\";\r\n            }\r\n            // children[cardIndex - 1].style.backgroundColor = \"green\";\r\n        }\r\n\r\n        if (cards.length > 0 && cardIndex === cards.length) {\r\n            if (winpos.length > 0) {\r\n                setWin(winpos[0]);\r\n                let tmpWin = winpos;\r\n                tmpWin.splice(0, 1);\r\n                setWinpos(tmpWin);\r\n            }\r\n\r\n            if (treasurepos.length > 0) {\r\n                let randIdx = Math.floor(Math.random() * treasurepos.length);\r\n                setTreasure(treasurepos[randIdx]);\r\n                let trepos = treasurepos;\r\n                trepos.splice(randIdx, 1);\r\n                setTreasurepos(trepos);\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cardIndex]);\r\n\r\n    useEffect(() => {\r\n        if (cards.length > 0) {\r\n            let tmpstr =\r\n                cards[Math.min(cardIndex, cards.length - 1)].split(\"/\");\r\n            tmpstr = tmpstr[tmpstr.length - 1];\r\n            tmpstr = tmpstr.split(\".\")[0];\r\n            setCode(tmpstr);\r\n        }\r\n    }, [cards, cardIndex]);\r\n\r\n    const prevHandler = (e) => {\r\n        if (cardIndex > 0) {\r\n            setCardIndex(cardIndex - 1);\r\n        }\r\n\r\n        if (treasure !== -1) {\r\n            setTreasurepos((prev) => [...prev, treasure]);\r\n            setTreasure(-1);\r\n        }\r\n\r\n        if (win !== -1) {\r\n            setWinpos((prev) => [...prev, win].sort());\r\n            setWin(-1);\r\n        }\r\n    };\r\n\r\n    const nextHandler = (e) => {\r\n        if (cardIndex < cards.length) {\r\n            setCardIndex(cardIndex + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"section\" style={{ background: color }}>\r\n            <div className=\"section__top\">\r\n                <h1 className=\"team__name\">Team #{index}</h1>\r\n                <div className=\"progress\" ref={progressRef}>\r\n                    {cards?.map((card, index) => (\r\n                        <p className=\"progress__indi\" key={`prog_${index}`}>\r\n                            {index + 1}\r\n                        </p>\r\n                    ))}\r\n                </div>\r\n                {cards?.length > 0 && cardIndex < cards.length && (\r\n                    <>\r\n                        <QRCode\r\n                            size={200}\r\n                            value={cards[cardIndex]}\r\n                            level=\"H\"\r\n                            className=\"qrcode\"\r\n                        />\r\n                        <p className=\"card__code\">code: {code}</p>\r\n                    </>\r\n                )}\r\n                {cardIndex === cards.length && (\r\n                    <>\r\n                        <img\r\n                            className=\"medal\"\r\n                            src={win !== -1 && `/winpos/${win}.png`}\r\n                            alt=\"\"\r\n                        />\r\n                        <img\r\n                            className=\"treasure\"\r\n                            src={treasure !== -1 && `/winpos/${treasure}.png`}\r\n                            alt=\"\"\r\n                        />\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"section__bottom\">\r\n                <div className=\"toggle\">\r\n                    <button\r\n                        className=\"previous__toggle\"\r\n                        onClick={(e) => prevHandler(e)}\r\n                    >\r\n                        « <span className=\"prev\">Prev</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"next__toggle\"\r\n                        onClick={(e) => nextHandler(e)}\r\n                    >\r\n                        <span className=\"next\">Next</span> »\r\n                    </button>\r\n                </div>\r\n                <h3 className=\"team__members\">\r\n                    {members && members.join(\", \")}\r\n                </h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Section;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Section from \"./Components/Section\";\n\nfunction App() {\n    const colors = [\"#cfb6e2\", \"#a7b4f1\", \"#6fb8b5\", \"#67cade\", \"#d0cda9\"];\n    const [winpos, setWinpos] = useState([1, 2, 3]);\n    const [treasurepos, setTreasurepos] = useState([\n        \"c1\",\n        \"c2\",\n        \"c3\",\n        \"c4\",\n        \"c5\",\n    ]);\n    const [teams, setTeams] = useState([]);\n    const [cardsData, setCardsData] = useState([]);\n    const [cards, setCards] = useState([]);\n\n    useEffect(() => {\n        async function fetchTeams() {\n            await fetch(\"./teams.json\")\n                .then((data) => data.json())\n                .then((res) => setTeams(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        async function fetchCards() {\n            await fetch(\"./thunt-cards.json\")\n                .then((data) => data.json())\n                .then((res) => setCardsData(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        fetchTeams();\n        fetchCards();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        function randomlyAddCards(res) {\n            setCards([]);\n            for (let i = 0; i < teams.length; i++) {\n                let tmpCards = [];\n                Object.keys(res).forEach((key) => {\n                    let cardsArray = res[key];\n                    const randomIndex = Math.floor(\n                        Math.random() * cardsArray.length\n                    );\n                    tmpCards.push(cardsArray[randomIndex]);\n                    cardsArray.splice(randomIndex, 1);\n                });\n\n                setCards((prev) => [...prev, tmpCards]);\n            }\n        }\n\n        if (cardsData) {\n            randomlyAddCards(cardsData);\n        }\n    }, [cardsData, teams.length]);\n\n    return (\n        <div className=\"app\">\n            <header>\n                <h1 className=\"title\">Treasure Hunt</h1>\n            </header>\n            <div className=\"card__sections\">\n                {teams?.map((team, index) => (\n                    <Section\n                        key={index}\n                        index={index + 1}\n                        color={colors[index]}\n                        members={team}\n                        cards={cards && cards[index]}\n                        winpos={winpos}\n                        treasurepos={treasurepos}\n                        setTreasurepos={setTreasurepos}\n                        setWinpos={setWinpos}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}