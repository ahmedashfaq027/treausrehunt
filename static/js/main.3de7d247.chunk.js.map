{"version":3,"sources":["Components/Notes.js","Components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Notes","useState","addNote","setAddNote","notes","setNotes","input","setInput","inputRef","useRef","removeNote","idx","e","a","prev","filter","_","i","className","map","note","index","onClick","onSubmit","preventDefault","tmp","trim","console","log","addNoteHandler","type","ref","value","tabIndex","onChange","target","Section","members","color","cards","winpos","setWinpos","treasurepos","setTreasurepos","code","setCode","cardIndex","setCardIndex","win","setWin","treasure","setTreasure","progressRef","useEffect","children","current","length","style","backgroundColor","randIdx","Math","floor","random","tmpstr","min","split","background","card","size","level","src","alt","sort","join","App","colors","teams","setTeams","cardsData","setCardsData","setCards","fetch","then","data","json","res","catch","err","fetchTeams","fetchCards","tmpCards","Object","keys","forEach","key","cardsArray","randomIndex","push","splice","randomlyAddCards","team","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3de7d247.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\n\r\nfunction Notes() {\r\n    const [addNote, setAddNote] = useState(false);\r\n    const [notes, setNotes] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n    const inputRef = useRef();\r\n\r\n    const addNoteHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        let tmp = input.trim();\r\n        if (tmp) {\r\n            setNotes((prev) => [...prev, tmp]);\r\n        }\r\n\r\n        setAddNote(!addNote);\r\n        setInput(\"\");\r\n\r\n        console.log(notes);\r\n    };\r\n\r\n    const buttonClick = (e) => {\r\n        setAddNote(!addNote);\r\n    };\r\n\r\n    const removeNote = async (idx, e) => {\r\n        setNotes((prev) => prev.filter((_, i) => i !== idx));\r\n    };\r\n\r\n    return (\r\n        <div className=\"notes\">\r\n            <div className=\"notes__list\">\r\n                {notes.map((note, index) => (\r\n                    <div\r\n                        key={`note__${index}`}\r\n                        className={`note note__${index}`}\r\n                    >\r\n                        <p>{note}</p>\r\n                        <span onClick={(e) => removeNote(index, e)}>x</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {!addNote ? (\r\n                <div className=\"notes__add\" onClick={(e) => buttonClick(e)}>\r\n                    <h3 className=\"add__icon\">âž• </h3>\r\n                    <p>Add note</p>\r\n                </div>\r\n            ) : (\r\n                <form\r\n                    className=\"edit__note\"\r\n                    onSubmit={(e) => addNoteHandler(e)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        ref={inputRef}\r\n                        value={input}\r\n                        tabIndex=\"0\"\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        className=\"note__text\"\r\n                    />\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport QRCode from \"react-qr-code\";\r\nimport Notes from \"./Notes\";\r\n\r\nfunction Section({\r\n    index,\r\n    members,\r\n    color,\r\n    cards = [],\r\n    winpos,\r\n    setWinpos,\r\n    treasurepos,\r\n    setTreasurepos,\r\n}) {\r\n    const [code, setCode] = useState(\"\");\r\n    const [cardIndex, setCardIndex] = useState(0);\r\n    const [win, setWin] = useState(-1);\r\n    const [treasure, setTreasure] = useState(-1);\r\n    const progressRef = useRef();\r\n\r\n    useEffect(() => {\r\n        let children = progressRef.current.children;\r\n        if (children && children.length > 1) {\r\n            for (let i = 0; i < cardIndex; i++) {\r\n                children[i].style.backgroundColor = \"green\";\r\n            }\r\n            for (let i = cardIndex; i < children.length; i++) {\r\n                children[i].style.backgroundColor = \"#d20909\";\r\n            }\r\n        }\r\n\r\n        if (cards.length > 0 && cardIndex === cards.length) {\r\n            if (winpos.length > 0) {\r\n                setWin(winpos[0]);\r\n                // let tmpWin = winpos;\r\n                // tmpWin.splice(0, 1);\r\n                setWinpos((prev) => prev.filter((_, i) => i !== 0));\r\n            }\r\n\r\n            if (treasurepos.length > 0) {\r\n                let randIdx = Math.floor(Math.random() * treasurepos.length);\r\n                setTreasure(treasurepos[randIdx]);\r\n                // let trepos = treasurepos;\r\n                // trepos.splice(randIdx, 1);\r\n                setTreasurepos((prev) => prev.filter((_, i) => i !== randIdx));\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cardIndex]);\r\n\r\n    useEffect(() => {\r\n        if (cards.length > 0) {\r\n            let tmpstr =\r\n                cards[Math.min(cardIndex, cards.length - 1)].split(\"/\");\r\n            tmpstr = tmpstr[tmpstr.length - 1];\r\n            tmpstr = tmpstr.split(\".\")[0];\r\n            setCode(tmpstr);\r\n        }\r\n    }, [cards, cardIndex]);\r\n\r\n    const prevHandler = (e) => {\r\n        if (cardIndex > 0) {\r\n            setCardIndex(cardIndex - 1);\r\n        }\r\n\r\n        if (treasure !== -1) {\r\n            setTreasurepos((prev) => [...prev, treasure]);\r\n            setTreasure(-1);\r\n        }\r\n\r\n        if (win !== -1) {\r\n            setWinpos((prev) => [...prev, win].sort());\r\n            setWin(-1);\r\n        }\r\n    };\r\n\r\n    const nextHandler = (e) => {\r\n        if (cardIndex < cards.length) {\r\n            setCardIndex(cardIndex + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card__section\" style={{ background: color }}>\r\n                <div className=\"section__top\">\r\n                    <h1 className=\"team__name\">Team #{index}</h1>\r\n                    <div className=\"progress\" ref={progressRef}>\r\n                        {cards?.map((card, index) => (\r\n                            <p className=\"progress__indi\" key={`prog_${index}`}>\r\n                                {index + 1}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                    {cards?.length > 0 && cardIndex < cards.length && (\r\n                        <>\r\n                            <QRCode\r\n                                size={200}\r\n                                value={cards[cardIndex]}\r\n                                level=\"H\"\r\n                                className=\"qrcode\"\r\n                            />\r\n                            <p className=\"card__code\">code: {code}</p>\r\n                        </>\r\n                    )}\r\n                    {cardIndex === cards.length && (\r\n                        <>\r\n                            <img\r\n                                className=\"medal\"\r\n                                src={win !== -1 && `./winpos/${win}.png`}\r\n                                alt=\"\"\r\n                            />\r\n                            <img\r\n                                className=\"treasure\"\r\n                                src={\r\n                                    treasure !== -1 &&\r\n                                    `./winpos/${treasure}.png`\r\n                                }\r\n                                alt=\"\"\r\n                            />\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"section__bottom\">\r\n                    <div className=\"toggle\">\r\n                        <button\r\n                            className=\"previous__toggle\"\r\n                            onClick={(e) => prevHandler(e)}\r\n                        >\r\n                            Â« <span className=\"prev\">Prev</span>\r\n                        </button>\r\n                        <button\r\n                            className=\"next__toggle\"\r\n                            onClick={(e) => nextHandler(e)}\r\n                        >\r\n                            <span className=\"next\">Next</span> Â»\r\n                        </button>\r\n                    </div>\r\n                    <h3 className=\"team__members\">\r\n                        {members && members.join(\", \")}\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n            <Notes />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Section;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Section from \"./Components/Section\";\n\nfunction App() {\n    const colors = [\"#cfb6e2\", \"#a7b4f1\", \"#6fb8b5\", \"#67cade\", \"#d0cda9\"];\n    const [winpos, setWinpos] = useState([1, 2, 3]);\n    const [treasurepos, setTreasurepos] = useState([\n        \"c1\",\n        \"c2\",\n        \"c3\",\n        \"c4\",\n        \"c5\",\n    ]);\n    const [teams, setTeams] = useState([]);\n    const [cardsData, setCardsData] = useState([]);\n    const [cards, setCards] = useState([]);\n\n    useEffect(() => {\n        async function fetchTeams() {\n            await fetch(\"./teams.json\")\n                .then((data) => data.json())\n                .then((res) => setTeams(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        async function fetchCards() {\n            await fetch(\"./thunt-cards.json\")\n                .then((data) => data.json())\n                .then((res) => setCardsData(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        fetchTeams();\n        fetchCards();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        function randomlyAddCards(res) {\n            setCards([]);\n            for (let i = 0; i < teams.length; i++) {\n                let tmpCards = [];\n                Object.keys(res).forEach((key) => {\n                    let cardsArray = res[key];\n                    const randomIndex = Math.floor(\n                        Math.random() * cardsArray.length\n                    );\n                    tmpCards.push(cardsArray[randomIndex]);\n                    cardsArray.splice(randomIndex, 1);\n                });\n\n                setCards((prev) => [...prev, tmpCards]);\n            }\n        }\n\n        if (cardsData) {\n            randomlyAddCards(cardsData);\n        }\n    }, [cardsData, teams.length]);\n\n    return (\n        <div className=\"app\">\n            <header>\n                <h1 className=\"title\">Treasure Hunt</h1>\n            </header>\n            <div className=\"card__sections\">\n                {teams?.map((team, index) => (\n                    <Section\n                        key={index}\n                        index={index + 1}\n                        color={colors[index]}\n                        members={team}\n                        cards={cards && cards[index]}\n                        winpos={winpos}\n                        treasurepos={treasurepos}\n                        setTreasurepos={setTreasurepos}\n                        setWinpos={setWinpos}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}