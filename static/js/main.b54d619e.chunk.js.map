{"version":3,"sources":["Components/Notes.js","Components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Notes","useState","addNote","setAddNote","notes","setNotes","input","setInput","inpRef","useRef","addNoteHandler","e","preventDefault","tmp","trim","prev","useEffect","current","focus","removeNote","idx","a","filter","_","i","className","map","note","index","onClick","style","display","onSubmit","type","placeholder","ref","value","tabIndex","onBlur","onChange","target","Section","members","color","cards","winpos","setWinpos","treasurepos","setTreasurepos","code","setCode","cardIndex","setCardIndex","win","setWin","treasure","setTreasure","progressRef","children","length","backgroundColor","randIdx","Math","floor","random","tmpstr","min","split","background","card","size","level","src","alt","sort","join","App","colors","teams","setTeams","cardsData","setCardsData","setCards","order","setOrder","fetch","then","data","json","res","catch","err","console","log","fetchData","tmpCards","Object","keys","forEach","key","push","randomlyAddCards","team","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b54d619e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\n\r\nfunction Notes() {\r\n    const [addNote, setAddNote] = useState(false);\r\n    const [notes, setNotes] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n    const inpRef = useRef();\r\n\r\n    const addNoteHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        let tmp = input.trim();\r\n        if (tmp) {\r\n            setNotes((prev) => [...prev, tmp]);\r\n        }\r\n\r\n        setAddNote(!addNote);\r\n        setInput(\"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (addNote) {\r\n            inpRef.current.focus();\r\n        }\r\n    }, [addNote]);\r\n\r\n    const buttonClick = (e) => {\r\n        setAddNote(!addNote);\r\n    };\r\n\r\n    const removeNote = async (idx, e) => {\r\n        setNotes((prev) => prev.filter((_, i) => i !== idx));\r\n    };\r\n\r\n    return (\r\n        <div className=\"notes\">\r\n            <div className=\"notes__list\">\r\n                {notes.map((note, index) => (\r\n                    <div key={`note__${index}`} className={`note`}>\r\n                        <p>{note}</p>\r\n                        <span onClick={(e) => removeNote(index, e)}>x</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {!addNote && (\r\n                <div className=\"notes__add\" onClick={(e) => buttonClick(e)}>\r\n                    <h3 className=\"add__icon\">âž• </h3>\r\n                    <p>Add note</p>\r\n                </div>\r\n            )}\r\n            <form\r\n                style={{ display: addNote ? \"flex\" : \"none\" }}\r\n                className=\"edit__note\"\r\n                onSubmit={(e) => addNoteHandler(e)}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Add Note...\"\r\n                    ref={inpRef}\r\n                    value={input}\r\n                    tabIndex=\"0\"\r\n                    onBlur={(e) => addNoteHandler(e)}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    className=\"note__text\"\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport QRCode from \"react-qr-code\";\r\nimport Notes from \"./Notes\";\r\n\r\nfunction Section({\r\n    index,\r\n    members,\r\n    color,\r\n    cards = [],\r\n    winpos,\r\n    setWinpos,\r\n    treasurepos,\r\n    setTreasurepos,\r\n}) {\r\n    const [code, setCode] = useState(\"\");\r\n    const [cardIndex, setCardIndex] = useState(0);\r\n    const [win, setWin] = useState(-1);\r\n    const [treasure, setTreasure] = useState(-1);\r\n    const progressRef = useRef();\r\n\r\n    useEffect(() => {\r\n        let children = progressRef.current.children;\r\n        if (children && children.length > 1) {\r\n            for (let i = 0; i < cardIndex; i++) {\r\n                children[i].style.backgroundColor = \"green\";\r\n            }\r\n            for (let i = cardIndex; i < children.length; i++) {\r\n                children[i].style.backgroundColor = \"#d20909\";\r\n            }\r\n        }\r\n\r\n        if (cards.length > 0 && cardIndex === cards.length) {\r\n            if (winpos.length > 0) {\r\n                setWin(winpos[0]);\r\n                // let tmpWin = winpos;\r\n                // tmpWin.splice(0, 1);\r\n                setWinpos((prev) => prev.filter((_, i) => i !== 0));\r\n            }\r\n\r\n            if (treasurepos.length > 0) {\r\n                let randIdx = Math.floor(Math.random() * treasurepos.length);\r\n                setTreasure(treasurepos[randIdx]);\r\n                // let trepos = treasurepos;\r\n                // trepos.splice(randIdx, 1);\r\n                setTreasurepos((prev) => prev.filter((_, i) => i !== randIdx));\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cardIndex]);\r\n\r\n    useEffect(() => {\r\n        if (cards.length > 0) {\r\n            let tmpstr =\r\n                cards[Math.min(cardIndex, cards.length - 1)].split(\"/\");\r\n            tmpstr = tmpstr[tmpstr.length - 1];\r\n            tmpstr = tmpstr.split(\".\")[0];\r\n            setCode(tmpstr);\r\n        }\r\n    }, [cards, cardIndex]);\r\n\r\n    const prevHandler = (e) => {\r\n        if (cardIndex > 0) {\r\n            setCardIndex(cardIndex - 1);\r\n        }\r\n\r\n        if (treasure !== -1) {\r\n            setTreasurepos((prev) => [...prev, treasure]);\r\n            setTreasure(-1);\r\n        }\r\n\r\n        if (win !== -1) {\r\n            setWinpos((prev) => [...prev, win].sort());\r\n            setWin(-1);\r\n        }\r\n    };\r\n\r\n    const nextHandler = (e) => {\r\n        if (cardIndex < cards.length) {\r\n            setCardIndex(cardIndex + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card__section\" style={{ background: color }}>\r\n                <div className=\"section__top\">\r\n                    <h1 className=\"team__name\">Team #{index}</h1>\r\n                    <div className=\"progress\" ref={progressRef}>\r\n                        {cards?.map((card, index) => (\r\n                            <p className=\"progress__indi\" key={`prog_${index}`}>\r\n                                {index + 1}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                    {cards?.length > 0 && cardIndex < cards.length && (\r\n                        <>\r\n                            <QRCode\r\n                                size={200}\r\n                                value={cards[cardIndex]}\r\n                                level=\"H\"\r\n                                className=\"qrcode\"\r\n                            />\r\n                            <p className=\"card__code\">code: {code}</p>\r\n                        </>\r\n                    )}\r\n                    {cardIndex === cards.length && (\r\n                        <>\r\n                            <img\r\n                                className=\"medal\"\r\n                                src={win !== -1 && `./winpos/${win}.png`}\r\n                                alt=\"\"\r\n                            />\r\n                            <img\r\n                                className=\"treasure\"\r\n                                src={\r\n                                    treasure !== -1 &&\r\n                                    `./winpos/${treasure}.png`\r\n                                }\r\n                                alt=\"\"\r\n                            />\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"section__bottom\">\r\n                    <div className=\"toggle\">\r\n                        <button\r\n                            className=\"previous__toggle\"\r\n                            onClick={(e) => prevHandler(e)}\r\n                        >\r\n                            Â« <span className=\"prev\">Prev</span>\r\n                        </button>\r\n                        <button\r\n                            className=\"next__toggle\"\r\n                            onClick={(e) => nextHandler(e)}\r\n                        >\r\n                            <span className=\"next\">Next</span> Â»\r\n                        </button>\r\n                    </div>\r\n                    <h3 className=\"team__members\">\r\n                        {members && members.join(\", \")}\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n            <Notes />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Section;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Section from \"./Components/Section\";\n\nfunction App() {\n    const colors = [\"#cfb6e2\", \"#a7b4f1\", \"#6fb8b5\", \"#67cade\", \"#d0cda9\"];\n    const [winpos, setWinpos] = useState([1, 2, 3]);\n    const [treasurepos, setTreasurepos] = useState([\n        \"c1\",\n        \"c2\",\n        \"c3\",\n        \"c4\",\n        \"c5\",\n    ]);\n    const [teams, setTeams] = useState([]);\n    const [cardsData, setCardsData] = useState([]);\n    const [cards, setCards] = useState([]);\n    const [order, setOrder] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            await fetch(\"./thunt-cards.json\")\n                .then((data) => data.json())\n                .then((res) => {\n                    setTeams(res.teams);\n                    setCardsData(res.cards);\n                    setOrder(res.order);\n                })\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        function randomlyAddCards() {\n            setCards([]);\n            for (let i = 0; i < teams.length; i++) {\n                let tmpCards = [];\n                Object.keys(order).forEach((key, index) => {\n                    const idx = order[key][i] - 1;\n                    let card = cardsData[key][idx];\n                    tmpCards.push(card);\n                });\n\n                setCards((prev) => [...prev, tmpCards]);\n            }\n        }\n\n        if (cardsData) {\n            randomlyAddCards();\n        }\n    }, [cardsData, order, teams.length]);\n\n    return (\n        <div className=\"app\">\n            <header>\n                <h1 className=\"title\">Treasure Hunt</h1>\n            </header>\n            <div className=\"card__sections\">\n                {teams?.map((team, index) => (\n                    <Section\n                        key={index}\n                        index={index + 1}\n                        color={colors[index]}\n                        members={team}\n                        cards={cards && cards[index]}\n                        winpos={winpos}\n                        treasurepos={treasurepos}\n                        setTreasurepos={setTreasurepos}\n                        setWinpos={setWinpos}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}