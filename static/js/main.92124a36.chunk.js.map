{"version":3,"sources":["Components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Section","index","members","color","cards","winpos","setWinpos","useState","cardIndex","setCardIndex","win","setWin","progressRef","useRef","console","log","useEffect","children","current","length","i","style","backgroundColor","tmpWin","splice","className","background","ref","map","card","size","value","level","src","alt","onClick","e","join","App","colors","teams","setTeams","cardsData","setCardsData","setCards","a","fetch","then","data","json","res","catch","err","fetchTeams","fetchCards","tmpCards","Object","keys","forEach","key","cardsArray","randomIndex","Math","floor","random","push","prev","randomlyAddCards","team","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQA4FeA,MAxFf,YAA4E,IAAzDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,MAAwC,IAAjCC,aAAiC,MAAzB,GAAyB,EAArBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAC1D,EAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsBF,oBAAU,GAAhC,mBAAOG,EAAP,KAAYC,EAAZ,KACMC,EAAcC,mBAoCpB,OAlCAC,QAAQC,IAAIX,GAEZY,qBAAU,WACN,IAAIC,EAAWL,EAAYM,QAAQD,SACnC,GAAIA,EAASE,OAAS,EAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAWY,IAC3BH,EAASG,GAAGC,MAAMC,gBAAkB,QAI5C,GAAIlB,EAAMe,OAAS,GAAKX,IAAcJ,EAAMe,QACpCd,EAAOc,OAAS,EAAG,CACnBR,EAAON,EAAO,IACd,IAAIkB,EAASlB,EACbkB,EAAOC,OAAO,EAAG,GACjBlB,EAAUiB,MAKnB,CAACf,IAeA,sBAAKiB,UAAU,UAAUJ,MAAO,CAAEK,WAAYvB,GAA9C,UACI,sBAAKsB,UAAU,eAAf,UACI,qBAAIA,UAAU,aAAd,mBAAkCxB,KAClC,qBAAKwB,UAAU,WAAWE,IAAKf,EAA/B,gBACKR,QADL,IACKA,OADL,EACKA,EAAOwB,KAAI,SAACC,EAAM5B,GAAP,OACR,mBAAGwB,UAAU,iBAAb,SAA+BxB,EAAQ,UAGzC,OAALG,QAAK,IAALA,OAAA,EAAAA,EAAOe,QAAS,GAAKX,EAAYJ,EAAMe,QACpC,cAAC,IAAD,CACIW,KAAM,IACNC,MAAO3B,EAAMI,GACbwB,MAAM,IACNP,UAAU,WAGjBjB,IAAcJ,EAAMe,QACjB,qBACIM,UAAU,QACVQ,KAAc,IAATvB,GAAA,kBAAyBA,EAAzB,QACLwB,IAAI,QAKhB,sBAAKT,UAAU,kBAAf,UACI,sBAAKA,UAAU,SAAf,UACI,yBACIA,UAAU,mBACVU,QAAS,SAACC,GAzCtB5B,EAAY,GACZC,EAAaD,EAAY,IAsCjB,kBAIM,sBAAMiB,UAAU,OAAhB,qBAEN,yBACIA,UAAU,eACVU,QAAS,SAACC,GAzCtB5B,EAAYJ,EAAMe,QAClBV,EAAaD,EAAY,IAsCjB,UAII,sBAAMiB,UAAU,OAAhB,kBAJJ,cAOJ,oBAAIA,UAAU,gBAAd,SACKvB,GAAWA,EAAQmC,KAAK,eCT9BC,MAxEf,WACI,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAC5D,EAA4BhC,mBAAS,CAAC,EAAG,EAAG,IAA5C,mBAAOF,EAAP,KAAeC,EAAf,KACA,EAA0BC,mBAAS,IAAnC,mBAAOiC,EAAP,KAAcC,EAAd,KACA,EAAkClC,mBAAS,IAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAA0BpC,mBAAS,IAAnC,mBAAOH,EAAP,KAAcwC,EAAd,KA6CA,OA3CA5B,qBAAU,WAAM,4CACZ,sBAAA6B,EAAA,sEACUC,MAAM,gBACPC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAST,EAASS,MACvBC,OAAM,SAACC,GAAD,OAAStC,QAAQC,IAAIqC,EAAK,YAJzC,4CADY,kEAQZ,sBAAAP,EAAA,sEACUC,MAAM,sBACPC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAASP,EAAaO,MAC3BC,OAAM,SAACC,GAAD,OAAStC,QAAQC,IAAIqC,EAAK,YAJzC,4CARY,uBAAC,WAAD,wBAeZC,GAfY,mCAgBZC,KAED,IAEHtC,qBAAU,WAkBF0B,GAjBJ,SAA0BQ,GACtBN,EAAS,IACT,IAF2B,eAElBxB,GACL,IAAImC,EAAW,GACfC,OAAOC,KAAKP,GAAKQ,SAAQ,SAACC,GACtB,IAAIC,EAAaV,EAAIS,GACfE,EAAcC,KAAKC,MACrBD,KAAKE,SAAWJ,EAAWzC,QAE/BoC,EAASU,KAAKL,EAAWC,IACzBD,EAAWpC,OAAOqC,EAAa,MAGnCjB,GAAS,SAACsB,GAAD,4BAAcA,GAAd,CAAoBX,QAXxBnC,EAAI,EAAGA,EAAIoB,EAAMrB,OAAQC,IAAM,IAgBxC+C,CAAiBzB,KAEtB,CAACA,EAAWF,EAAMrB,SAGjB,sBAAKM,UAAU,MAAf,UACI,iCACI,oBAAIA,UAAU,QAAd,6BAEJ,qBAAKA,UAAU,iBAAf,gBACKe,QADL,IACKA,OADL,EACKA,EAAOZ,KAAI,SAACwC,EAAMnE,GAAP,OACR,cAAC,EAAD,CAEIA,MAAOA,EAAQ,EACfE,MAAOoC,EAAOtC,GACdC,QAASkE,EACThE,MAAOA,GAASA,EAAMH,GACtBI,OAAQA,EACRC,UAAWA,GANNL,YClDdoE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,K","file":"static/js/main.92124a36.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport QRCode from \"react-qr-code\";\r\n\r\nfunction Section({ index, members, color, cards = [], winpos, setWinpos }) {\r\n    const [cardIndex, setCardIndex] = useState(0);\r\n    const [win, setWin] = useState(-1);\r\n    const progressRef = useRef();\r\n\r\n    console.log(cards);\r\n\r\n    useEffect(() => {\r\n        let children = progressRef.current.children;\r\n        if (children.length > 0) {\r\n            for (let i = 0; i < cardIndex; i++) {\r\n                children[i].style.backgroundColor = \"green\";\r\n            }\r\n        }\r\n\r\n        if (cards.length > 0 && cardIndex === cards.length) {\r\n            if (winpos.length > 0) {\r\n                setWin(winpos[0]);\r\n                let tmpWin = winpos;\r\n                tmpWin.splice(0, 1);\r\n                setWinpos(tmpWin);\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cardIndex]);\r\n\r\n    const prevHandler = (e) => {\r\n        if (cardIndex > 0) {\r\n            setCardIndex(cardIndex - 1);\r\n        }\r\n    };\r\n\r\n    const nextHandler = (e) => {\r\n        if (cardIndex < cards.length) {\r\n            setCardIndex(cardIndex + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"section\" style={{ background: color }}>\r\n            <div className=\"section__top\">\r\n                <h1 className=\"team__name\">Team #{index}</h1>\r\n                <div className=\"progress\" ref={progressRef}>\r\n                    {cards?.map((card, index) => (\r\n                        <p className=\"progress__indi\">{index + 1}</p>\r\n                    ))}\r\n                </div>\r\n                {cards?.length > 0 && cardIndex < cards.length && (\r\n                    <QRCode\r\n                        size={200}\r\n                        value={cards[cardIndex]}\r\n                        level=\"H\"\r\n                        className=\"qrcode\"\r\n                    />\r\n                )}\r\n                {cardIndex === cards.length && (\r\n                    <img\r\n                        className=\"medal\"\r\n                        src={win !== -1 && `/winpos/${win}.png`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"section__bottom\">\r\n                <div className=\"toggle\">\r\n                    <button\r\n                        className=\"previous__toggle\"\r\n                        onClick={(e) => prevHandler(e)}\r\n                    >\r\n                        « <span className=\"prev\">Prev</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"next__toggle\"\r\n                        onClick={(e) => nextHandler(e)}\r\n                    >\r\n                        <span className=\"next\">Next</span> »\r\n                    </button>\r\n                </div>\r\n                <h3 className=\"team__members\">\r\n                    {members && members.join(\", \")}\r\n                </h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Section;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Section from \"./Components/Section\";\n\nfunction App() {\n    const colors = [\"#cfb6e2\", \"#a7b4f1\", \"#6fb8b5\", \"#67cade\", \"#d0cda9\"];\n    const [winpos, setWinpos] = useState([1, 2, 3]);\n    const [teams, setTeams] = useState([]);\n    const [cardsData, setCardsData] = useState([]);\n    const [cards, setCards] = useState([]);\n\n    useEffect(() => {\n        async function fetchTeams() {\n            await fetch(\"./teams.json\")\n                .then((data) => data.json())\n                .then((res) => setTeams(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        async function fetchCards() {\n            await fetch(\"./thunt-cards.json\")\n                .then((data) => data.json())\n                .then((res) => setCardsData(res))\n                .catch((err) => console.log(err, \"error\"));\n        }\n\n        fetchTeams();\n        fetchCards();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        function randomlyAddCards(res) {\n            setCards([]);\n            for (let i = 0; i < teams.length; i++) {\n                let tmpCards = [];\n                Object.keys(res).forEach((key) => {\n                    let cardsArray = res[key];\n                    const randomIndex = Math.floor(\n                        Math.random() * cardsArray.length\n                    );\n                    tmpCards.push(cardsArray[randomIndex]);\n                    cardsArray.splice(randomIndex, 1);\n                });\n\n                setCards((prev) => [...prev, tmpCards]);\n            }\n        }\n\n        if (cardsData) {\n            randomlyAddCards(cardsData);\n        }\n    }, [cardsData, teams.length]);\n\n    return (\n        <div className=\"app\">\n            <header>\n                <h1 className=\"title\">Treasure Hunt</h1>\n            </header>\n            <div className=\"card__sections\">\n                {teams?.map((team, index) => (\n                    <Section\n                        key={index}\n                        index={index + 1}\n                        color={colors[index]}\n                        members={team}\n                        cards={cards && cards[index]}\n                        winpos={winpos}\n                        setWinpos={setWinpos}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}